apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
  /* Folders */
  //   The root of your project, i.e. where "package.json" lives. Default is '../..'
  // root = file("../../")
  //   The folder where the react-native NPM package is. Default is ../../node_modules/react-native
  // reactNativeDir = file("../../node_modules/react-native")
  //   The folder where the react-native Codegen package is. Default is ../../node_modules/@react-native/codegen
  // codegenDir = file("../../node_modules/@react-native/codegen")
  //   The cli.js file which is the React Native CLI entrypoint. Default is ../../node_modules/react-native/cli.js
  // cliFile = file("../../node_modules/react-native/cli.js")

  /* Variants */
  //   The list of variants to that are debuggable. For those we're going to
  //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
  //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
  // debuggableVariants = ["liteDebug", "prodDebug"]

  /* Bundling */
  //   A list containing the node command and its flags. Default is just 'node'.
  // nodeExecutableAndArgs = ["node"]
  //
  //   The command to run when bundling. By default is 'bundle'
  // bundleCommand = "ram-bundle"
  //
  //   The path to the CLI configuration file. Default is empty.
  // bundleConfig = file(../rn-cli.config.js)
  //
  //   The name of the generated asset file containing your JS bundle
  // bundleAssetName = "MyApplication.android.bundle"
  //
  //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
   entryFile = file("../../index.tsx")
  //
  //   A list of extra flags to pass to the 'bundle' commands.
  //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
  // extraPackagerArgs = []

  /* Hermes Commands */
  //   The hermes compiler command to run. By default it is 'hermesc'
  // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
  //
  //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
  // hermesFlags = ["-O", "-output-source-map"]

  /* Autolinking */
  autolinkLibrariesWithApp()
}

project.ext.react = [
  bundleInDebug: (project.findProperty('bundle_in_debug')?.toBoolean()) ?: false,
  enableHermes: hermesEnabled,
]

def enableSeparateBuildPerCPUArchitecture = false

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = io.github.react-native-community:jsc-android-intl:2026004.+`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

/**
 * Architectures to build native code for in debug.
 */
//def nativeArchitectures = project.getProperties().get("reactNativeDebugArchitectures")

/**
 * production env
 */
def fw_appid_production = ""
def fw_base_url_production = "https://api.firework.com"
def fw_pixel_base_url_production = "https://p2.fwpixel.com/"
def fw_web_socket_production = "wss://api.firework.com/socket/websocket"

/**
 * staging env
 */
def fw_appid_staging = ""
def fw_base_url_staging = "https://api.firework-staging.com"
def fw_pixel_base_url_staging = ""
def fw_web_socket_staging = "wss://api.firework-staging.com/socket/websocket"



android {
  ndkVersion rootProject.ext.ndkVersion
  buildToolsVersion rootProject.ext.buildToolsVersion
  compileSdk rootProject.ext.compileSdkVersion

  namespace "com.loopnow.bogano"
  defaultConfig {
    applicationId "com.loopnow.bogano"
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion
    versionCode 1
    versionName "2.14.0"
  }
  splits {
    abi {
      reset()
      enable enableSeparateBuildPerCPUArchitecture
      universalApk false  // If true, also generate a universal APK
      include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
    }
  }
  signingConfigs {
    debug {
      v1SigningEnabled true
      v2SigningEnabled true
    }
    release {
      v1SigningEnabled true
      v2SigningEnabled true
    }
  }
  buildTypes {
    debug {
      versionNameSuffix "-debug"
      signingConfig signingConfigs.debug
      proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
      minifyEnabled enableProguardInReleaseBuilds
//      if (nativeArchitectures) {
//        ndk {
//          abiFilters nativeArchitectures.split(',')
//        }
//      }
    }

    release {
      versionNameSuffix ""
      // Caution! In production, you need to generate your own keystore file.
      // see https://reactnative.dev/docs/signed-apk-android.
      signingConfig signingConfigs.release
      proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
      minifyEnabled enableProguardInReleaseBuilds
    }
  }

  flavorDimensions "env"

  productFlavors {
    staging {
      dimension "env"
      versionNameSuffix "-staging"
      manifestPlaceholders["fw_appid"] = fw_appid_staging
      manifestPlaceholders["fw_base_url"] = fw_base_url_staging
      manifestPlaceholders["fw_pixel_base_url"] = fw_pixel_base_url_staging
      manifestPlaceholders["fw_web_socket"] = fw_web_socket_staging
    }
    production {
      dimension "env"
      versionNameSuffix ""
      manifestPlaceholders["fw_appid"] = fw_appid_production
      manifestPlaceholders["fw_base_url"] = fw_base_url_production
      manifestPlaceholders["fw_pixel_base_url"] = fw_pixel_base_url_production
      manifestPlaceholders["fw_web_socket"] = fw_web_socket_production
    }
  }
}

dependencies {
  // The version of react-native is set by the React Native Gradle Plugin
  implementation("com.facebook.react:react-android")

  if (hermesEnabled.toBoolean()) {
    implementation("com.facebook.react:hermes-android")
  } else {
    implementation jscFlavor
  }

  implementation project(':react-native-firework-sdk')
}

//apply from: file("../../node_modules/react-native-vector-icons/fonts.gradle")
apply from: 'react-native-vector-icons/fonts.gradle'

apply from: 'firework.gradle'
apply from: rootProject.file('lint.gradle')

configurations.all {
  resolutionStrategy {
    force 'androidx.appcompat:appcompat:1.1.0'
  }
}

afterEvaluate {
  try {
    installDebug.dependsOn installProductionDebug
  } catch (Exception e) {
    e.printStackTrace()
  }
}
task installDebug()
